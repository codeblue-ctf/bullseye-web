<header>
    <div class="pull-left"><h1><a href="<%= url_for %>">Bull's Eye</a></h1></div>
    <div class="pull-right">
        <div id="bullseye-problems">
            <div class="flex">
                <div class="items">
                    <div id="bullseye-problems-mode">play</div>
                </div>
                <div class="items" id="bullseye-problems-list"></div>
                <div class="items" id="bullseye-problems-round"></div>
                <div class="items">
                    <div id="bullseye-problems-autoplay">&#9654;</div>
                </div>
            </div>
        </div>
    </div>
</header>

<div id="bullseye-menu"><a href="<%= url_for :action => 'table' %>">Detail</a></div>
<div id="bullseye-teams"></div>
<div id="bullseye-nowexploiting">
    <div class="message">
        <input type="text" value="Evaluating..." class="text" id="bullseye-notice-input">
        <!--<input type="time">-->
    </div>
</div>
<div id="bullseye-loading"><div class="loader"></div></div>

<script type="text/x-jsrender" id="bullseye-template-problems-list">
    <div id="bullseye-problems-selected" class="bullseye-btn" data-problem-id="0">Select problem</div>
    <div id="bullseye-problems-panel" class="bullseye-panel">
        {{for problems}}
            <div class="problems bullseye-panel-items" data-problem-id="{{>problem_id}}">
                <div class="name">{{>name}}</div>
            </div>
        {{/for}}
        <div class="problems bullseye-panel-items" data-problem-id="-1" id="bullseye-nowexploiting-trigger">
            <div class="name">notice</div>
        </div>
    </div>
</script>

<script type="text/x-jsrender" id="bullseye-template-problems-round">
    <div id="bullseye-problems-round-selected" class="bullseye-btn" data-round="">-</div>
    <div id="bullseye-problems-round-panel" class="bullseye-panel">
        {{props rounds}}
            <div class="rounds bullseye-panel-items" data-round="{{>key}}">{{>prop}}</div>
        {{/props}}
    </div>
</script>

<script type="text/x-jsrender" id="bullseye-template-teams">
    <table class="table">
        <tr>
            <th>#</th>
            <th>Team</th>
            <th>Score</th>
        </tr>

        <%#
        <div class="teams-container">
            <div class="teams" data-schedule-team-id="{{>schedule_team_id}}">
                <div class="name">{{>name}}</div>
                <div class="score">{{>score}}pt</div>
            </div>
        </div>
        %>

        {{for teams}}
            <tr class="teams" data-schedule-team-id="{{>schedule_team_id}}">
                <td>{{>#index+1}}</td>
                <td>{{>name}}</td>
                <td>{{>score}}</td>
            </tr>
        {{/for}}
    </table>
</script>

<script>
$(() => {
    let PROBLEMS = {}

    let setPlayed = (schedule_team_id, schedule_id, problem_id, current_round) => {
        let played = JSON.parse(localStorage.played || '{}')

        played['schedule'] = played['schedule'] || {}
        played['schedule'][schedule_team_id] = played['schedule'][schedule_team_id] || []
        if (played['schedule'][schedule_team_id].includes(schedule_id) === false) {
            played['schedule'][schedule_team_id].push(schedule_id)
        }

        played['problem'] = played['problem'] || {}
        played['problem'][problem_id] = played['problem'][problem_id] || {}
        played['problem'][problem_id][current_round] = played['problem'][problem_id][current_round] || []
        if (played['problem'][problem_id][current_round].includes(schedule_team_id) === false) {
            played['problem'][problem_id][current_round].push(schedule_team_id)
        }

        localStorage.played = JSON.stringify(played)
    }

    let selectRound = (problem_id, round) => {
        localStorage.currentRound = round
        $('#bullseye-problems-round-selected').data('round', round)
        $('#bullseye-problems-round-selected').text(formatRound(problem_id, round))
    }

    let getRound = () => {
        return $('#bullseye-problems-round-selected').data('round')
    }

    let formatRound = (problem_id, round_id) => {
        if (PROBLEMS[problem_id]['round'][round_id] === undefined) {
            return `-`
        }

        let label = PROBLEMS[problem_id]['round'][round_id]['label']
        let start_date = new Date(Date.parse(PROBLEMS[problem_id]['round'][1]['start_at']))
        let date = new Date(Date.parse(PROBLEMS[problem_id]['round'][round_id]['start_at']))
        let day = (date.getDate() - start_date.getDate() + 1)
        let hour = ('0' + date.getHours()).slice(-2)
        let min = ('0' + date.getMinutes()).slice(-2)
        return `${label} (${day}day ${hour}:${min})`
    }

    let selectProblem = (problem_id, current_round) => {
        if (problem_id === -1) {
            $('#bullseye-problems-selected')
                .data('problem-id', 0)
                .text('Now exploiting...')
            return
        }

        // set problem panel
        localStorage.currentProblemId = problem_id
        $('#bullseye-problems-selected')
            .data('problem-id', problem_id)
            .text(PROBLEMS[problem_id]['name'])

        // set round panel
        let _rounds = {}
        for (let i = PROBLEMS[problem_id]['min_round']; i <= PROBLEMS[problem_id]['max_round']; i++) {
            if (PROBLEMS[problem_id]['round'][i] === undefined) {
                continue
            }
            _rounds[i] = formatRound(problem_id, i)
        }
        $('#bullseye-problems-round').html($('#bullseye-template-problems-round').render({'rounds': _rounds}))
        selectRound(problem_id, current_round || PROBLEMS[problem_id]['max_round'])

        $('#bullseye-problems-round-selected').click((e) => {
            $('#bullseye-problems-round-panel').fadeToggle(200)
        })
        $('.rounds').click((e) => {
            let self = $(e.currentTarget)
            selectRound(problem_id, self.data('round'))
            $('#bullseye-problems-round-panel').hide()
        })

        // set select problem played team
        $('.teams').removeClass('played')
        let played = JSON.parse(localStorage.played || '{}')
        if (played['problem'] && played['problem'][problem_id] && played['problem'][problem_id][current_round]) {
            for (let schedule_team_id of played['problem'][problem_id][current_round]) {
                $('.teams[data-schedule-team-id="' + schedule_team_id + '"]').addClass('played')
            }
        }
    }

    let loadProblems = () => {
        // make panel
        let _problems = []
        for (let problem_id in PROBLEMS) {
            _problems.push({
                'problem_id': problem_id,
                'name': PROBLEMS[problem_id]['name']
            })
        }
        $('#bullseye-problems-list').append($('#bullseye-template-problems-list').render({'problems': _problems}))

        // events
        $('.problems').click((e) => {
            let self = $(e.currentTarget)
            selectProblem(self.data('problem-id'))
            $('#bullseye-problems-panel').hide()
        })

        $('.problems#bullseye-nowexploiting-trigger').click((e) => {
            $('#bullseye-nowexploiting').fadeIn(200)
        })

        $('#bullseye-nowexploiting').click((e) => {
            $('#bullseye-nowexploiting').fadeOut(200)
        })

        $('#bullseye-nowexploiting input').click((e) => {
            e.stopPropagation()
        })

        $('#bullseye-problems-selected').click((e) => {
            $('#bullseye-problems-panel').fadeToggle(200)
        })

        $('#bullseye-problems-mode').click((e) => {
            let self = $(e.currentTarget)
            self.text(localStorage.mode = self.text() === 'play' ? 'skip' : 'play')
        })

        $('#bullseye-problems-autoplay').click((e) => {
            let problem_id = localStorage.currentProblemId
            if (problem_id === undefined || problem_id === 0) {
                alert('Select problem')
                return
            }

            let current_round = getRound()

            // validation
            if (PROBLEMS[problem_id]['round'][current_round] === undefined) {
                alert('Select ROUND not exists')
                return
            }
            if (Object.keys(PROBLEMS[problem_id]['round'][current_round]['team_result']).length === 0) {
                alert('Team result not exists')
                return
            }

            let schedule_ids = []
            for (let schedule_team_id in PROBLEMS[problem_id]['round'][current_round]['team_result']) {
                schedule_id = PROBLEMS[problem_id]['round'][current_round]['team_result'][schedule_team_id]
                schedule_ids.push(schedule_id)
                setPlayed(schedule_team_id, schedule_id, problem_id, current_round)
            }
            schedule_ids.sort(() => { return Math.random() - .5 }) // what??
            let first_id = schedule_ids.shift()
            let mode = $('#bullseye-problems-mode').text() === 'play' ? 'play' : 'skip'

            localStorage.currentRound = current_round
            location.href = "<%= url_for :action => 'play' %>#" + first_id + '&' + mode + '&' + schedule_ids.join(',')
        })
        
        if (localStorage.currentProblemId !== undefined) {
            selectProblem(localStorage.currentProblemId, localStorage.currentRound)
        }

        if (localStorage.mode !== undefined) {
            $('#bullseye-problems-mode').text(localStorage.mode)
        }
    }

    let loadTeams = (r) => {
        let teams = []
        let played = JSON.parse(localStorage.played || '{}')
        let jeopardy = JSON.parse(localStorage.jeopardy || '{}')
        let schedule = played['schedule'] || {}
        for (let team of r) {
            let score = jeopardy[team['schedule_team_id']] || 0
            for (schedule_id of schedule[team['schedule_team_id']] || []) {
                score += team['score'][schedule_id] || 0
            }
            team['score'] = score
            teams.push(team)
        }
        teams.sort((a, b) => {
            if (a['score'] < b['score']) {
                return 1
            }
            if (a['score'] > b['score']) {
                return -1
            }
            return 0
        })
        $('#bullseye-teams').append($('#bullseye-template-teams').render({'teams': teams}))
        $('.teams').click((e) => {
            let self = $(e.currentTarget)
            let problem_id = localStorage.currentProblemId
            if (problem_id === undefined || problem_id === 0) {
                alert('Select problem')
                return
            }

            let current_round = getRound()
            if (PROBLEMS[problem_id]['round'][current_round] === undefined) {
                alert('Result not exists (round)')
                return
            }
            localStorage.currentRound = current_round

            let schedule_team_id = self.data('schedule-team-id')
            let schedule_id = PROBLEMS[problem_id]['round'][current_round]['team_result'][schedule_team_id]
            if (schedule_id === undefined) {
                alert('Result not exists (team)')
                return
            }

            setPlayed(schedule_team_id, schedule_id, problem_id, current_round)
            let mode = $('#bullseye-problems-mode').text() === 'play' ? 'play' : 'skip'
            location.href = "<%= url_for :action => 'play' %>#" + schedule_id + '&' + mode
        })
    }

    $('#bullseye-notice-input').change((e) => {
        let self = $(e.currentTarget)
        localStorage.notice = self.val()
        self.blur()
    })
    if (localStorage.notice) {
        $('#bullseye-notice-input').val(localStorage.notice)
    }

    /**
     * loading
     */
    let _loading = 2

    let endLoading = () => {
        _loading--
        if (_loading <= 0) {
          $('#bullseye-loading').hide()
        }
    }

    $('#bullseye-loading').show()
    $.getJSON(CONFIG.API_BASE + '/teams.json', (r) => {
        localStorage.teams = JSON.stringify(r)
        loadTeams(r)
        endLoading()
    })
    $.getJSON(CONFIG.API_BASE + '/problems.json', (r) => {
        localStorage.problems = JSON.stringify(r)
        PROBLEMS = r
        for (let problem_id in r) {
            let round = Object.keys(r[problem_id]['round'])
            PROBLEMS[problem_id]['min_round'] = Math.min(...round)
            PROBLEMS[problem_id]['max_round'] = Math.max(...round)
        }
        loadProblems()
        endLoading()
    })
})
</script>
